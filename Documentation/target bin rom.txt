
h3	#target BIN and ROM
	bin, rom

p	These are the simplest and most common targets. ROM is intended for creating rom files while BIN is intended to be downloaded somehow into the ram of a target system. The only difference between ROM and BIN is, that for ROMs zasm uses 0xFF as the default fill byte for gaps, e.g. in the 'defs' pseudo instruction or for the padding at the and of a #code segment.

h5	#target ROM

p	This file is a plain rom or eprom image.
p	Segments are padded with $FF to the defined size, if the size wasn't omitted.
p	The address should be the address at which it is visible to the CPU, the so-called 'physical' address.

pre	#target	rom
	#code	<name>,<start>,<size>
			...

p	Example for a rom which is paged into the Z80 address space in 2 pages:

pre	#target	rom
	#code	_PAGE1,0,0x4000
			...
	#code	_PAGE2,0,0x4000
			...


h5	#target BIN

p	Pretty the same as a rom file, but rather expected to be loaded somewhere into ram.
p	Segments are padded with $00, if the size wasn't omitted.

pre	#target	bin
	#code	<name>,<start>,<size>
			...

h5	Writing Intel Hex files

p	Using command line option '-x' the BIN and ROM targets can be written in the Intel Hex format. These files look like this:

pre	:200000003E00ED79ED79ED793E40ED793EDAED793E37ED79ED780F30FB3A1027D370ED787B
	:090020000F0F30FADB70321027DB
	:00000001FF

p	Trailing fill bytes (0xFF for ROM and 0x00 for BIN) in each segment are not stored in the file. This generally reduces file size and the time to burn the file into an eprom or to transmit it to the host system. The disadvantage is that in rare cases some last bytes are not stored and consequently not written into the ram of the target system, thus leaving these ram positions in an unset state. The target system should therefore always erase the ram before downloading the file! For eproms this is not such a problem because eproms must be erased before they can be burned and they are erased to â€¦ 0xFF of course. That's the reason why the fill byte for ROM is 0xFF.

h5 	Writing Motorola S-Record format

p	Using command line option '-s' the BIN and ROM targets can be written in the Motorola S-Record format. These files look like this:

pre	S00F00007320323031352D30312D313178
	S12C00003E00ED79ED79ED793E40ED793EDAED793E37ED79ED780F30FB3A1027D370ED780F0F30FADB7032102772
	S5030001FB
	S9030000FC

p	Trailing fill bytes are handled as for the Intel hex format.






