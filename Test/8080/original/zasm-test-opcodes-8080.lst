              	; --------------------------------------
              	; zasm: assemble "zasm-test-opcodes-8080.asm"
              	; opts: --asm8080
              	; date: 2018-05-18 20:49:25
              	; --------------------------------------


              	#!/usr/local/bin/zasm -o original/
              	; –––––––––––––––––––––––––––––––––––––––––––––––––
              	; 				zasm test file
              	; –––––––––––––––––––––––––––––––––––––––––––––––––
              	;
              	; 2014-12-31 kio
              	
              	
              	; tests selector:
              	
0001:         	test_expressions 		equ 1
0001:         	test_fails 				equ 1	; include the "must fail" tests
              	
              	
              		.8080
              	
0000:         		org 0
              	
              	
              	; –––––––––––––––––––––––––––––––––––––––––––––––––
              	; 				test expressions
              	; –––––––––––––––––––––––––––––––––––––––––––––––––
              	
              	#if test_expressions
              	
              	n5 			= 		5
0014:         	n20			equ		20
0014:         	n20			equ 	20
              	
              	#if test_fails
0014:         	!anton		equ		20 30		; operator missing
              	!n20		equ 	30			; label redefined
              	!foo		equ					; value missing
              	#endif
              	
0000: 0A      		db		10
0001: 10      		db		$10
0002: 02      		db		%10
0003: 10      		db		10h
0004: 02      		db		10b
0005: 10      		db		0x10
0006: 41      		db		'A'
0007: 85      		db		-123
0008: 7B      		db		+123
0009: 00      		db		0
000A: 02      		db		2
000B: 00      		db		0b
000C: 01      		db		1b
000D: 08      		db		8h
000E: 0A      		db		0b1010
000F: 02      		db		0b10
              	
              	#Assert		0 == 0
              	#assert		-1 == -1
              	#assert		33 == 33
              	
              	#assert		5 > 3
              	#assert		3 < 5
              	#assert		5 != 3
              	#assert		3 >= 3
              	#assert		3 <= 3
              	#assert		5 >= 3
              	#assert		3 <= 5
              	
              	#assert		-n20 == -20
              	
              	#assert		~0 == -1
              	#assert		~-1 == 0
              	
              	#assert		!0 == 1
              	#assert		!77 == 0
              	#assert		!-33 == 0
              	#assert		!-0 == 1
              	
              	#assert		3|5 == 7
              	#assert		3&5 == 1
              	#assert		3^5 == 6
              	
              	#assert		3<<2 == 3*4
              	#assert		0xff00<<4 == 0xff000
              	#assert		7>>1 == 3
              	#assert		0xff00>>4 == 0x0ff0
              	
              	#assert		3 + 5 == 8
              	#assert		3 + -5 == -2
              	#assert		3-5==-2
              	#assert		3- -5==8
              	#assert		3*5==15
              	#assert		3*-5==-15
              	#assert		3/5==0
              	#assert		55/3==18
              	#assert		-55/3==-18
              	#assert		55/-3==-18
              	#assert		-55/-3==18
              	#assert		6/3==2
              	#assert		3%5==3
              	#assert		55%3==1
              	#assert		-55%3==-1
              	#assert		55%-3==1
              	#assert		-55%-3==-1
              	#assert		6%3==0
              	
              	#assert		3 == 3/5*5 + 3%5
              	#assert		55 == 55/3*3 + 55%3
              	#assert		-55 == -55/3*3 + -55%3
              	#assert		55 == 55/-3*-3 + 55%-3
              	#assert		-55 == -55/-3*-3 + -55%-3
              	#assert		6 == 6/3*3 + 6%3
              	
              	#assert		n5+n20 == 25
              	#assert		n5+n20*2 == 45
              	#assert		n20*2+n5 == 45
              	#assert		2+4-1*7 == -1
              	#assert		-(20) == 20 * -1
              	#assert		n20/7 == 2
              	#assert		(n20+1)/7 == 3
              	#assert		1 + 2*3<<4 == 97
              	
              	#endif ; test_expressions
              	
              	
0100:         	nn	equ	0100h
0100:         	adr	equ	nn
0100:         	d16	equ nn
0001:         	n	equ	01h
0001:         	d8	equ n
              	
              	
0010: 00      		NOP			;	0x00 	1
0011: 010001  		LXI B,D16	;	0x01 	3				B <- byte 3, C <- byte 2
0014: 02      		STAX B		;	0x02 	1				(BC) <- A
0015: 03      		INX B		;	0x03 	1				BC <- BC+1
0016: 04      		INR B		;	0x04 	1	Z, S, P, AC	B <- B+1
0017: 05      		DCR B		;	0x05 	1	Z, S, P, AC	B <- B-1
0018: 0601    		MVI B, D8	;	0x06 	2				B <- byte 2
001A: 07      		RLC			;	0x07 	1	CY			A = A << 1; bit 0 = prev bit 7; CY = prev bit 7
001B: 08      		db 8		;	0x08
001C: 09      		DAD B		;	0x09 	1	CY	HL = HL + BC
001D: 0A      		LDAX B		;	0x0a 	1				A <- (BC)
001E: 0B      		DCX B		;	0x0b 	1				BC = BC-1
001F: 0C      		INR C		;	0x0c 	1	Z, S, P, AC	C <- C+1
0020: 0D      		DCR C		;	0x0d 	1	Z, S, P, AC	C <-C-1
0021: 0E01    		MVI C,D8	;	0x0e 	2				C <- byte 2
0023: 0F      		RRC			;	0x0f 	1	CY			A = A >> 1; bit 7 = prev bit 0; CY = prev bit 0
0024: 10      		db 10h		;	0x10
0025: 110001  		LXI D,D16	;	0x11 	3				D <- byte 3, E <- byte 2
0028: 12      		STAX D		;	0x12 	1				(DE) <- A
0029: 13      		INX D		;	0x13 	1				DE <- DE + 1
002A: 14      		INR D		;	0x14 	1	Z, S, P, AC	D <- D+1
002B: 15      		DCR D		;	0x15 	1	Z, S, P, AC	D <- D-1
002C: 1601    		MVI D, D8	;	0x16 	2				D <- byte 2
002E: 17      		RAL			;	0x17 	1	CY			A = A << 1; bit 0 = prev CY; CY = prev bit 7
002F: 18      		db 18h		;	0x18
0030: 19      		DAD D		;	0x19 	1	CY			HL = HL + DE
0031: 1A      		LDAX D		;	0x1a 	1				A <- (DE)
0032: 1B      		DCX D		;	0x1b 	1				DE = DE-1
0033: 1C      		INR E		;	0x1c 	1	Z, S, P, AC	E <-E+1
0034: 1D      		DCR E		;	0x1d 	1	Z, S, P, AC	E <- E-1
0035: 1E01    		MVI E,D8	;	0x1e 	2				E <- byte 2
0037: 1F      		RAR			;	0x1f 	1	CY			A = A >> 1; bit 7 = prev bit 7; CY = prev bit 0
0038: 20      		db 20h		;	0x20
0039: 210001  		LXI H,D16	;	0x21 	3				H <- byte 3, L <- byte 2
003C: 220001  		SHLD adr	;	0x22 	3				(adr) <-L; (adr+1)<-H
003F: 23      		INX H		;	0x23 	1				HL <- HL + 1
0040: 24      		INR H		;	0x24 	1	Z, S, P, AC	H <- H+1
0041: 25      		DCR H		;	0x25 	1	Z, S, P, AC	H <- H-1
0042: 2601    		MVI H,D8	;	0x26 	2				L <- byte 2
0044: 27      		DAA			;	0x27 	1				decimal adjust prev. arith. op.
0045: 28      		db  28h		;	0x28
0046: 29      		DAD H		;	0x29 	1	CY			HL = HL + HI
0047: 2A0001  		LHLD adr	;	0x2a 	3				L <- (adr); H<-(adr+1)
004A: 2B      		DCX H		;	0x2b 	1				HL = HL-1
004B: 2C      		INR L		;	0x2c 	1	Z, S, P, AC	L <- L+1
004C: 2D      		DCR L		;	0x2d 	1	Z, S, P, AC	L <- L-1
004D: 2E01    		MVI L, D8	;	0x2e 	2				L <- byte 2
004F: 2F      		CMA			;	0x2f 	1				A <- ~A
0050: 30      		db  30h		;	0x30
0051: 310001  		LXI SP, D16	;	0x31 	3				SP.hi <- byte 3, SP.lo <- byte 2
0054: 320001  		STA adr		;	0x32 	3				(adr) <- A
0057: 33      		INX SP		;	0x33 	1				SP = SP + 1
0058: 34      		INR M		;	0x34 	1	Z, S, P, AC	(HL) <- (HL)+1
0059: 35      		DCR M		;	0x35 	1	Z, S, P, AC	(HL) <- (HL)-1
005A: 3601    		MVI M,D8	;	0x36 	2				(HL) <- byte 2
005C: 37      		STC			;	0x37 	1	CY			CY = 1
005D: 38      		db  38h		;	0x38
005E: 39      		DAD SP		;	0x39 	1	CY			HL = HL + SP
005F: 3A0001  		LDA adr		;	0x3a 	3				A <- (adr)
0062: 3B      		DCX SP		;	0x3b 	1				SP = SP-1
0063: 3C      		INR A		;	0x3c 	1	Z, S, P, AC	A <- A+1
0064: 3D      		DCR A		;	0x3d 	1	Z, S, P, AC	A <- A-1
0065: 3E01    		MVI A,D8	;	0x3e 	2				A <- byte 2
0067: 3F      		CMC			;	0x3f 	1	CY			CY=!CY
0068: 40      		MOV B,B		;	0x40 	1				B <- B
0069: 41      		MOV B,C		;	0x41 	1				B <- C
006A: 42      		MOV B,D		;	0x42 	1				B <- D
006B: 43      		MOV B,E		;	0x43 	1				B <- E
006C: 44      		MOV B,H		;	0x44 	1				B <- H
006D: 45      		MOV B,L		;	0x45 	1				B <- L
006E: 46      		MOV B,M		;	0x46 	1				B <- (HL)
006F: 47      		MOV B,A		;	0x47 	1				B <- A
0070: 48      		MOV C,B		;	0x48 	1				C <- B
0071: 49      		MOV C,C		;	0x49 	1				C <- C
0072: 4A      		MOV C,D		;	0x4a 	1				C <- D
0073: 4B      		MOV C,E		;	0x4b 	1				C <- E
0074: 4C      		MOV C,H		;	0x4c 	1				C <- H
0075: 4D      		MOV C,L		;	0x4d 	1				C <- L
0076: 4E      		MOV C,M		;	0x4e 	1				C <- (HL)
0077: 4F      		MOV C,A		;	0x4f 	1				C <- A
0078: 50      		MOV D,B		;	0x50 	1				D <- B
0079: 51      		MOV D,C		;	0x51 	1				D <- C
007A: 52      		MOV D,D		;	0x52 	1				D <- D
007B: 53      		MOV D,E		;	0x53 	1				D <- E
007C: 54      		MOV D,H		;	0x54 	1				D <- H
007D: 55      		MOV D,L		;	0x55 	1				D <- L
007E: 56      		MOV D,M		;	0x56 	1				D <- (HL)
007F: 57      		MOV D,A		;	0x57 	1				D <- A
0080: 58      		MOV E,B		;	0x58 	1				E <- B
0081: 59      		MOV E,C		;	0x59 	1				E <- C
0082: 5A      		MOV E,D		;	0x5a 	1				E <- D
0083: 5B      		MOV E,E		;	0x5b 	1				E <- E
0084: 5C      		MOV E,H		;	0x5c 	1				E <- H
0085: 5D      		MOV E,L		;	0x5d 	1				E <- L
0086: 5E      		MOV E,M		;	0x5e 	1				E <- (HL)
0087: 5F      		MOV E,A		;	0x5f 	1				E <- A
0088: 60      		MOV H,B		;	0x60 	1				H <- B
0089: 61      		MOV H,C		;	0x61 	1				H <- C
008A: 62      		MOV H,D		;	0x62 	1				H <- D
008B: 63      		MOV H,E		;	0x63 	1				H <- E
008C: 64      		MOV H,H		;	0x64 	1				H <- H
008D: 65      		MOV H,L		;	0x65 	1				H <- L
008E: 66      		MOV H,M		;	0x66 	1				H <- (HL)
008F: 67      		MOV H,A		;	0x67 	1				H <- A
0090: 68      		MOV L,B		;	0x68 	1				L <- B
0091: 69      		MOV L,C		;	0x69 	1				L <- C
0092: 6A      		MOV L,D		;	0x6a 	1				L <- D
0093: 6B      		MOV L,E		;	0x6b 	1				L <- E
0094: 6C      		MOV L,H		;	0x6c 	1				L <- H
0095: 6D      		MOV L,L		;	0x6d 	1				L <- L
0096: 6E      		MOV L,M		;	0x6e 	1				L <- (HL)
0097: 6F      		MOV L,A		;	0x6f 	1				L <- A
0098: 70      		MOV M,B		;	0x70 	1				(HL) <- B
0099: 71      		MOV M,C		;	0x71 	1				(HL) <- C
009A: 72      		MOV M,D		;	0x72 	1				(HL) <- D
009B: 73      		MOV M,E		;	0x73 	1				(HL) <- E
009C: 74      		MOV M,H		;	0x74 	1				(HL) <- H
009D: 75      		MOV M,L		;	0x75 	1				(HL) <- L
009E: 76      		HLT			;	0x76 	1				halt cpu and wait for interrupt
009F: 77      		MOV M,A		;	0x77 	1				(HL) <- C
00A0: 78      		MOV A,B		;	0x78 	1				A <- B
00A1: 79      		MOV A,C		;	0x79 	1				A <- C
00A2: 7A      		MOV A,D		;	0x7a 	1				A <- D
00A3: 7B      		MOV A,E		;	0x7b 	1				A <- E
00A4: 7C      		MOV A,H		;	0x7c 	1				A <- H
00A5: 7D      		MOV A,L		;	0x7d 	1				A <- L
00A6: 7E      		MOV A,M		;	0x7e 	1				A <- (HL)
00A7: 7F      		MOV A,A		;	0x7f 	1				A <- A
00A8: 80      		ADD B		;	0x80 	1	Z, S, P, CY, AC	A <- A + B
00A9: 81      		ADD C		;	0x81 	1	Z, S, P, CY, AC	A <- A + C
00AA: 82      		ADD D		;	0x82 	1	Z, S, P, CY, AC	A <- A + D
00AB: 83      		ADD E		;	0x83 	1	Z, S, P, CY, AC	A <- A + E
00AC: 84      		ADD H		;	0x84 	1	Z, S, P, CY, AC	A <- A + H
00AD: 85      		ADD L		;	0x85 	1	Z, S, P, CY, AC	A <- A + L
00AE: 86      		ADD M		;	0x86 	1	Z, S, P, CY, AC	A <- A + (HL)
00AF: 87      		ADD A		;	0x87 	1	Z, S, P, CY, AC	A <- A + A
00B0: 88      		ADC B		;	0x88 	1	Z, S, P, CY, AC	A <- A + B + CY
00B1: 89      		ADC C		;	0x89 	1	Z, S, P, CY, AC	A <- A + C + CY
00B2: 8A      		ADC D		;	0x8a 	1	Z, S, P, CY, AC	A <- A + D + CY
00B3: 8B      		ADC E		;	0x8b 	1	Z, S, P, CY, AC	A <- A + E + CY
00B4: 8C      		ADC H		;	0x8c 	1	Z, S, P, CY, AC	A <- A + H + CY
00B5: 8D      		ADC L		;	0x8d 	1	Z, S, P, CY, AC	A <- A + L + CY
00B6: 8E      		ADC M		;	0x8e 	1	Z, S, P, CY, AC	A <- A + (HL) + CY
00B7: 8F      		ADC A		;	0x8f 	1	Z, S, P, CY, AC	A <- A + A + CY
00B8: 90      		SUB B		;	0x90 	1	Z, S, P, CY, AC	A <- A - B
00B9: 91      		SUB C		;	0x91 	1	Z, S, P, CY, AC	A <- A - C
00BA: 92      		SUB D		;	0x92 	1	Z, S, P, CY, AC	A <- A + D
00BB: 93      		SUB E		;	0x93 	1	Z, S, P, CY, AC	A <- A - E
00BC: 94      		SUB H		;	0x94 	1	Z, S, P, CY, AC	A <- A + H
00BD: 95      		SUB L		;	0x95 	1	Z, S, P, CY, AC	A <- A - L
00BE: 96      		SUB M		;	0x96 	1	Z, S, P, CY, AC	A <- A + (HL)
00BF: 97      		SUB A		;	0x97 	1	Z, S, P, CY, AC	A <- A - A
00C0: 98      		SBB B		;	0x98 	1	Z, S, P, CY, AC	A <- A - B - CY
00C1: 99      		SBB C		;	0x99 	1	Z, S, P, CY, AC	A <- A - C - CY
00C2: 9A      		SBB D		;	0x9a 	1	Z, S, P, CY, AC	A <- A - D - CY
00C3: 9B      		SBB E		;	0x9b 	1	Z, S, P, CY, AC	A <- A - E - CY
00C4: 9C      		SBB H		;	0x9c 	1	Z, S, P, CY, AC	A <- A - H - CY
00C5: 9D      		SBB L		;	0x9d 	1	Z, S, P, CY, AC	A <- A - L - CY
00C6: 9E      		SBB M		;	0x9e 	1	Z, S, P, CY, AC	A <- A - (HL) - CY
00C7: 9F      		SBB A		;	0x9f 	1	Z, S, P, CY, AC	A <- A - A - CY
00C8: A0      		ANA B		;	0xa0 	1	Z, S, P, CY, AC	A <- A & B
00C9: A1      		ANA C		;	0xa1 	1	Z, S, P, CY, AC	A <- A & C
00CA: A2      		ANA D		;	0xa2 	1	Z, S, P, CY, AC	A <- A & D
00CB: A3      		ANA E		;	0xa3 	1	Z, S, P, CY, AC	A <- A & E
00CC: A4      		ANA H		;	0xa4 	1	Z, S, P, CY, AC	A <- A & H
00CD: A5      		ANA L		;	0xa5 	1	Z, S, P, CY, AC	A <- A & L
00CE: A6      		ANA M		;	0xa6 	1	Z, S, P, CY, AC	A <- A & (HL)
00CF: A7      		ANA A		;	0xa7 	1	Z, S, P, CY, AC	A <- A & A
00D0: A8      		XRA B		;	0xa8 	1	Z, S, P, CY, AC	A <- A ^ B
00D1: A9      		XRA C		;	0xa9 	1	Z, S, P, CY, AC	A <- A ^ C
00D2: AA      		XRA D		;	0xaa 	1	Z, S, P, CY, AC	A <- A ^ D
00D3: AB      		XRA E		;	0xab 	1	Z, S, P, CY, AC	A <- A ^ E
00D4: AC      		XRA H		;	0xac 	1	Z, S, P, CY, AC	A <- A ^ H
00D5: AD      		XRA L		;	0xad 	1	Z, S, P, CY, AC	A <- A ^ L
00D6: AE      		XRA M		;	0xae 	1	Z, S, P, CY, AC	A <- A ^ (HL)
00D7: AF      		XRA A		;	0xaf 	1	Z, S, P, CY, AC	A <- A ^ A
00D8: B0      		ORA B		;	0xb0 	1	Z, S, P, CY, AC	A <- A | B
00D9: B1      		ORA C		;	0xb1 	1	Z, S, P, CY, AC	A <- A | C
00DA: B2      		ORA D		;	0xb2 	1	Z, S, P, CY, AC	A <- A | D
00DB: B3      		ORA E		;	0xb3 	1	Z, S, P, CY, AC	A <- A | E
00DC: B4      		ORA H		;	0xb4 	1	Z, S, P, CY, AC	A <- A | H
00DD: B5      		ORA L		;	0xb5 	1	Z, S, P, CY, AC	A <- A | L
00DE: B6      		ORA M		;	0xb6 	1	Z, S, P, CY, AC	A <- A | (HL)
00DF: B7      		ORA A		;	0xb7 	1	Z, S, P, CY, AC	A <- A | A
00E0: B8      		CMP B		;	0xb8 	1	Z, S, P, CY, AC	A - B
00E1: B9      		CMP C		;	0xb9 	1	Z, S, P, CY, AC	A - C
00E2: BA      		CMP D		;	0xba 	1	Z, S, P, CY, AC	A - D
00E3: BB      		CMP E		;	0xbb 	1	Z, S, P, CY, AC	A - E
00E4: BC      		CMP H		;	0xbc 	1	Z, S, P, CY, AC	A - H
00E5: BD      		CMP L		;	0xbd 	1	Z, S, P, CY, AC	A - L
00E6: BE      		CMP M		;	0xbe 	1	Z, S, P, CY, AC	A - (HL)
00E7: BF      		CMP A		;	0xbf 	1	Z, S, P, CY, AC	A - A
00E8: C0      		RNZ			;	0xc0 	1				if NZ, RET
00E9: C1      		POP B		;	0xc1 	1				C <- (sp); B <- (sp+1); sp <- sp+2
00EA: C20001  		JNZ adr		;	0xc2 	3				if NZ, PC <- adr
00ED: C30001  		JMP adr		;	0xc3 	3				PC <= adr
00F0: C40001  		CNZ adr		;	0xc4 	3				if NZ, CALL adr
00F3: C5      		PUSH B		;	0xc5 	1				(sp-2)<-C; (sp-1)<-B; sp <- sp - 2
00F4: C601    		ADI D8		;	0xc6 	2	Z, S, P, CY, AC	A <- A + byte
00F6: C7      		RST 0		;	0xc7 	1				CALL $0
00F7: C8      		RZ			;	0xc8 	1				if Z, RET
00F8: C9      		RET			;	0xc9 	1				PC.lo <- (sp); PC.hi<-(sp+1); SP <- SP+2
00F9: CA0001  		JZ adr		;	0xca 	3				if Z, PC <- adr
00FC: CB      		db 0cbh		;	0xcb
00FD: CC0001  		CZ adr		;	0xcc 	3				if Z, CALL adr
0100: CD0001  		CALL adr	;	0xcd 	3				(SP-1)<-PC.hi;(SP-2)<-PC.lo;SP<-SP+2;PC=adr
0103: CE01    		ACI D8		;	0xce 	2	Z, S, P, CY, AC	A <- A + data + CY
0105: CF      		RST 1		;	0xcf 	1				CALL $8
0106: D0      		RNC			;	0xd0 	1				if NCY, RET
0107: D1      		POP D		;	0xd1 	1				E <- (sp); D <- (sp+1); sp <- sp+2
0108: D20001  		JNC adr		;	0xd2 	3				if NCY, PC<-adr
010B: D301    		OUT D8		;	0xd3 	2				output byte to peripheral ic
010D: D40001  		CNC adr		;	0xd4 	3				if NCY, CALL adr
0110: D5      		PUSH D		;	0xd5 	1				(sp-2)<-E; (sp-1)<-D; sp <- sp - 2
0111: D601    		SUI D8		;	0xd6 	2	Z, S, P, CY, AC	A <- A - data
0113: D7      		RST 2		;	0xd7 	1				CALL $10
0114: D8      		RC			;	0xd8 	1				if CY, RET
0115: D9      		db  0d9h	;	0xd9
0116: DA0001  		JC adr		;	0xda 	3				if CY, PC<-adr
0119: DB01    		IN D8		;	0xdb 	2				input byte from peripheral ic
011B: DC0001  		CC adr		;	0xdc 	3				if CY, CALL adr
011E: DD      		db 0ddh		;	0xdd
011F: DE01    		SBI D8		;	0xde 	2	Z, S, P, CY, AC	A <- A - data - CY
0121: DF      		RST 3		;	0xdf 	1				CALL $18
0122: E0      		RPO			;	0xe0 	1				if PO, RET
0123: E1      		POP H		;	0xe1 	1				L <- (sp); H <- (sp+1); sp <- sp+2
0124: E20001  		JPO adr		;	0xe2 	3				if PO, PC <- adr
0127: E3      		XTHL		;	0xe3 	1				L <-> (SP); H <-> (SP+1)
0128: E40001  		CPO adr		;	0xe4 	3				if PO, CALL adr
012B: E5      		PUSH H		;	0xe5 	1				(sp-2)<-L; (sp-1)<-H; sp <- sp - 2
012C: E601    		ANI D8		;	0xe6 	2	Z, S, P, CY, AC	A <- A & data
012E: E7      		RST 4		;	0xe7 	1				CALL $20
012F: E8      		RPE			;	0xe8 	1				if PE, RET
0130: E9      		PCHL		;	0xe9 	1				PC.hi <- H; PC.lo <- L
0131: EA0001  		JPE adr		;	0xea 	3				if PE, PC <- adr
0134: EB      		XCHG		;	0xeb 	1				H <-> D; L <-> E
0135: EC0001  		CPE adr		;	0xec 	3				if PE, CALL adr
0138: ED      		db 0edh		;	0xed
0139: EE01    		XRI D8		;	0xee 	2	Z, S, P, CY, AC	A <- A ^ data
013B: EF      		RST 5		;	0xef 	1				CALL $28
013C: F0      		RP			;	0xf0 	1				if P, RET
013D: F1      		POP PSW		;	0xf1 	1	ALL			flags <- (sp); A <- (sp+1); sp <- sp+2
013E: F20001  		JP adr		;	0xf2 	3				if P=1 PC <- adr
0141: F3      		DI			;	0xf3 	1				disable interrupts
0142: F40001  		CP adr		;	0xf4 	3				if P, PC <- adr
0145: F5      		PUSH PSW	;	0xf5 	1				(sp-2)<-flags; (sp-1)<-A; sp <- sp - 2
0146: F601    		ORI D8		;	0xf6 	2	Z, S, P, CY, AC	A <- A | data
0148: F7      		RST 6		;	0xf7 	1				CALL $30
0149: F8      		RM			;	0xf8 	1				if M, RET
014A: F9      		SPHL		;	0xf9 	1				SP=HL
014B: FA0001  		JM adr		;	0xfa 	3				if M, PC <- adr
014E: FB      		EI			;	0xfb 	1				enable interrupts
014F: FC0001  		CM adr		;	0xfc 	3				if M, CALL adr
0152: FD      		db 0fdh		;	0xfd
0153: FE01    		CPI D8		;	0xfe 	2				Z, S, P, CY, AC	A - data
0155: FF      		RST 7		;	0xff 	1				CALL $38
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
***ERROR*** No such file or directory: file = "/pub/Develop/Projects/zasm-4.0/Test/8080/original/zasm-test-opcodes-8080." (fd108)


; +++ segments +++

#CODE          = $0000 =     0,  size = $0156 =   342

; +++ global symbols +++

_8080_           = $0001 =     1          zasm-test-opcodes-8080.asm:15 (unused)
_asm8080_        = $0001 =     1          zasm-test-opcodes-8080.asm:15 (unused)
_end             = $0156 =   342          zasm-test-opcodes-8080.asm:16 (unused)
_size            = $0156 =   342          zasm-test-opcodes-8080.asm:16 (unused)
adr              = $0100 =   256          zasm-test-opcodes-8080.asm:123
anton            = $0014 =    20          zasm-test-opcodes-8080.asm:31 (unused)
d16              = $0100 =   256          zasm-test-opcodes-8080.asm:124
d8               = $0001 =     1          zasm-test-opcodes-8080.asm:126
n                = $0001 =     1          zasm-test-opcodes-8080.asm:125
n20              = $0014 =    20          zasm-test-opcodes-8080.asm:27
n5               = $0005 =     5          zasm-test-opcodes-8080.asm:26
nn               = $0100 =   256          zasm-test-opcodes-8080.asm:122
test_expressions = $0001 =     1          zasm-test-opcodes-8080.asm:11
test_fails       = $0001 =     1          zasm-test-opcodes-8080.asm:12


total time: 0.0074 sec.
1 error
