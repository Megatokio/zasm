              	; --------------------------------------
              	; zasm: assemble "template_rom_with_c_code.asm"
              	; date: 2018-05-28 20:01:44
              	; --------------------------------------


              	#!/usr/local/bin/zasm -c ../../sdcc/bin/sdcc -o original/
              	; ================================================================
              	;	Example rom with c code for a Z80 system
              	;	Copyright  (c)	GÃ¼nter Woigk 1994 - 2015
              	;					mailto:kio@little-bat.de
              	; ================================================================
              	
              	#target rom
              	
0000:         	_rom_start::		equ	0
4000:         	_rom_end::			equ	0x4000
4000:         	_ram_start::		equ	0x4000
0000:         	_ram_end::			equ	0x10000
1000:         	_min_heap_size::	equ	0x1000
              	
              	
              	; ================================================================
              	; Define ordering of code segments in ram:
              	; these segments produce code in the output file!
              	; ================================================================
              	
0000:         	#code 	_HEADER,_rom_start
0000:         	#code 	_GSINIT				; init code: the compiler adds some code here and there as required
0000:         	#code 	_HOME				; code that must not be put in a bank switched part of memory.
0000:         	#code 	_CODE				; most code and const data go here
0000:         	#code 	_CABS,*,0			; referenced but never (?) actually used by sdcc
0000:         	#code 	_GSFINAL,*,0		; referenced but never (?) actually used by sdcc
0000:         	#code 	_INITIALIZER		; initializer for initialized data in ram
0000:         	#code	_ROM_PADDING		; pad rom file up to rom end
              			defs  _rom_end-$$
              	
              	
              	; ================================================================
              	; Define variables in ram:
              	; note: data segments do not produce actual code
              	; ================================================================
              	
4000:         	#data 	_DATA, _ram_start	; uninitialized data
0000:         	#data 	_INITIALIZED		; data initialized from _INITIALIZER
0000:         	#data	_DABS,*,0			; referenced but never (?) actually used by sdcc
0000:         	#data	_RSEG,*,0			; referenced but never (?) actually used by kcc
              	
0000:         	#data 	_HEAP				; heap:
0000:         	__sdcc_heap_start:	 		; --> sdcc _malloc.c
0000: 00000000			ds	_min_heap_size	; minimum required size
0004: 00...   			ds	_min_heap_size	; minimum required size
              			ds	_ram_end-$-1		; add all unused memory to the heap
1000:         	__sdcc_heap_end: 			; --> sdcc _malloc.c
1000: 00      			ds 	1
              	
              	
              	; ================================================================
              	; 	_HEADER segment:
              	; 	starts at 0x0000
              	; ================================================================
              	
              	;	reset vector
              	;	RST vectors
              	;	INT vector (IM 1)
              	;	NMI vector
              	
              	#CODE _HEADER
              	
              	; reset vector
0000: F3      	RST0::	di
0001: 310000  			ld		sp,_ram_end
0004: C30000  			jp		init
0007: FF      			defs	0x08-$
              	
0008: ED4D    	RST1::	reti
000A: FFFFFFFF			defs	0x10-$
000E: FFFF    	
              	
0010: ED4D    	RST2::	reti
0012: FFFFFFFF			defs	0x18-$
0016: FFFF    	
              	
0018: ED4D    	RST3::	reti
001A: FFFFFFFF			defs	0x20-$
001E: FFFF    	
              	
0020: ED4D    	RST4::	reti
0022: FFFFFFFF			defs	0x28-$
0026: FFFF    	
              	
0028: ED4D    	RST5::	reti
002A: FFFFFFFF			defs	0x30-$
002E: FFFF    	
              	
0030: ED4D    	RST6::	reti
0032: FFFFFFFF			defs	0x38-$
0036: FFFF    	
              	
              	; maskable interrupt handler in interrupt mode 1:
0038: ED4D    	RST7::	RETI						; add INT handler here
              	
              	
              	; init:
              	; globals and statics initialization
              	; starts with copying the fixed data:
              	
003A: 010000  	init:	ld	bc,_INITIALIZER_len		; length of segment _INITIALIZER
003D: 110000  			ld	de,_INITIALIZED			; start of segment _INITIALIZED
0040: 210000  			ld	hl,_INITIALIZER			; start of segment _INITIALIZER
0043: 78      			ld	a,b
0044: B1      			or	c
0045: 2802    			jr	z,$+4
0047: EDB0    			ldir
              	
0049: CD0000  			call    _GSINIT				; Initialise global variables
004C: CD0000  			call	_main				; execute main()
              	
              	; shut down:
              	; if main() returns then something went wrong.
              	; call debugger and on exit restart system.
              	
004F: F3      	_exit::	di
0050: CD0000  			call 	NMI
0053: C7      			rst		0
              	
              	; non maskable interrupt:
              	; e.g. call debugger and on exit resume.
              	
0054: FFFFFFFF			defs   	0x66-$
0058: FF...   	
0066: ED45    	NMI::	RETN						; add NMI handler here
              	
              	
              	; ================================================================
              	; the payload:
              	; ================================================================
              	
              	
              	#CFLAGS  $CFLAGS --nostdinc -I../../sdcc/include	; add some flags for sdcc
              	#INCLUDE "main.c"									; compile & include file "main.c"
***ERROR***   	                 ^ "sdcc main.c" returned exit code 8
- - - - - -
- - - - - -

              	#INCLUDE LIBRARY "../../sdcc/lib/"					; resolve missing global labels
              	
              	#if !defined(__mulint)	; fix for old sdcc 3.4.x:
              					defs	0,__mulint		; make __mulint missing
              	__mulint_rrx_s	equ 	__mulint		; define what we need to be what we have
              	#INCLUDE LIBRARY "../../sdcc/lib/"					; resolve missing global labels
              	#endif
              	
              	
              	; ================================================================
              	; calculate some last labels:
              	; ================================================================
              	
              	#CODE _GSINIT
              	
              			ret							; final ret from initialization code
              	
              	
              	#CODE _INITIALIZER
              	
              	_INITIALIZER_len = $ - _INITIALIZER	; calc size of initializer data for ldir in init code
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	
              	


; +++ segments +++

#CODE _GSINIT       =  ***VOID***  ,  size =  ***VOID***  
#CODE _HOME         =  ***VOID***  ,  size =  ***VOID***  
#CODE _CODE         =  ***VOID***  ,  size =  ***VOID***  
#CODE _CABS         =  ***VOID***  ,  size = $0000 =     0
#CODE _GSFINAL      =  ***VOID***  ,  size = $0000 =     0
#CODE _INITIALIZER  =  ***VOID***  ,  size =  ***VOID***  
#CODE _ROM_PADDING  =  ***VOID***  ,  size =  ***VOID***  
#DATA _DATA         = $4000 = 16384,  size =  ***VOID***  
#DATA _INITIALIZED  =  ***VOID***  ,  size =  ***VOID***  
#DATA _DABS         =  ***VOID***  ,  size = $0000 =     0
#DATA _RSEG         =  ***VOID***  ,  size = $0000 =     0
#DATA _HEAP         =  ***VOID***  ,  size =  ***VOID***  

; +++ global symbols +++

NMI               = $0066 =   102  _HEADER      template_rom_with_c_code.asm:118
RST0              = $0000 =     0  _HEADER      template_rom_with_c_code.asm:64 (unused)
RST1              = $0008 =     8  _HEADER      template_rom_with_c_code.asm:69 (unused)
RST2              = $0010 =    16  _HEADER      template_rom_with_c_code.asm:72 (unused)
RST3              = $0018 =    24  _HEADER      template_rom_with_c_code.asm:75 (unused)
RST4              = $0020 =    32  _HEADER      template_rom_with_c_code.asm:78 (unused)
RST5              = $0028 =    40  _HEADER      template_rom_with_c_code.asm:81 (unused)
RST6              = $0030 =    48  _HEADER      template_rom_with_c_code.asm:84 (unused)
RST7              = $0038 =    56  _HEADER      template_rom_with_c_code.asm:88 (unused)
_CABS_size        = $0000 =     0  _CABS        template_rom_with_c_code.asm:25 (unused)
_DABS_size        = $0000 =     0  _DABS        template_rom_with_c_code.asm:39 (unused)
_DATA             = $4000 = 16384  _DATA        template_rom_with_c_code.asm:37 (unused)
_GSFINAL_size     = $0000 =     0  _GSFINAL     template_rom_with_c_code.asm:26 (unused)
_GSINIT           =  ***VOID***    _GSINIT      template_rom_with_c_code.asm:22
_HEADER           = $0000 =     0  _HEADER      template_rom_with_c_code.asm:21 (unused)
_INITIALIZED      =  ***VOID***    _INITIALIZED template_rom_with_c_code.asm:38
_INITIALIZER      =  ***VOID***    _INITIALIZER template_rom_with_c_code.asm:27
_INITIALIZER_len  = ***UNDEFINED***
_RSEG_size        = $0000 =     0  _RSEG        template_rom_with_c_code.asm:40 (unused)
_exit             = $004F =    79  _HEADER      template_rom_with_c_code.asm:110 (unused)
_main             = ***UNDEFINED***
_min_heap_size    = $1000 =  4096               template_rom_with_c_code.asm:14
_ram_end          = $0000 = 65536               template_rom_with_c_code.asm:13
_ram_start        = $4000 = 16384               template_rom_with_c_code.asm:12
_rom_end          = $4000 = 16384               template_rom_with_c_code.asm:11
_rom_start        = $0000 =     0               template_rom_with_c_code.asm:10
init              = $003A =    58  _HEADER      template_rom_with_c_code.asm:95


total time: 0.1612 sec.
1 error
