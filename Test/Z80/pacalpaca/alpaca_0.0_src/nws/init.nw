\chapter{System Initialization}
\label{chp:init}

This chapter describes what the system does as it starts up, and
how it initializes all of the hardware and software modules.


\begin{enumerate}

    \item Hardware Initialization - zero all ram

    \item Splash Screen Display

    \item Initialize Tasks

    \item Start Runtime

\end{enumerate}

<<.start implementation>>=
.start:
<<start hardware init>>
<<start initialize tasks>>
<<start enable interrupts>>
<<start splash screen>>
@


%%%%%%%%%%%%%%%%%%%%
\section{Hardware Initialization}

This gets called immediately from the [[RST 00]] call, as defined in 
\S\ref{chp:kernserv}, which basically is simply a [[jp]] to here 
at memory location [[0x0000]], which is where execution starts when
the processor is turned on.

Okay, so the first thing that happens is that we head over to the
[[.startup]] block, where lots of things will be setup.

<<start hardware init>>=
	di			; disable processor interrupts
@

We setup the ``initial'' stack pointer because this will change
around once we get into starting up the multiple threads later.

<<start hardware init>>=
	ld	sp, #(stack)	; setup the initial stack pointer
@

Interrupt mode 1 sends all interrupts through vector [[0x0038]], which is
what we will use for the IRQ timer.

<<start hardware init>>=
	im	1		; setup interrupt mode 1

@


For the next bit, we will use a memset function which we define in
\S\ref{chp:utils}.

Let's clear the watchdog timer, along with all of the other special hardware.
All of the control registers are within the range of [[0x5000]] through
[[0x50c0]].

<<start hardware init>>=
	;; clear the special registers
	ld	a, #0x00	; a  = 0x00
	ld	hl, #(specreg)	; hl = start of special registers
	ld 	b, #(speclen)	; b  = 0xC0 bytes to zero
	call	memset256	; 0x5000-0x50C0 will get 0x00

@

Now clear the sprite registers...

<<start hardware init>>=
	;; clear sprite registers
	ld	a, #0x00	; a  = 0x00
	ld	hl, #(sprtbase)	; hl = start of sprite registers
	ld	b, #(sprtlen)	; b  = 0x10 16 bytes
	call	memset256	; 0x4ff0-0x4fff will get 0x00

@

Now clear the screen/video ram...

<<start hardware init>>=
	;; clear the screen ram
	call	cls		; clear the screen RAM

@

Next, we will need to clear the user ram.  This should look very similar,
since it needs to do something similar.  This is a one-time use thing, so we
won't bother making it a callable method.  (You will never need to do this once
the system is running.)

Similalarly to the above, we need to clear 4 blocks of 256 bytes of ram.

<<start hardware init>>=
	;; clear user ram
	ld	hl, #(ram)	; hl = base of RAM
	ld	a, #0x03	; a = 0
	ld	b, #0x02	; b = 2 blocks of 256 bytes to clear
	call	memsetN		; clear the blocks

@


Once we're done with everything, we need to do some pac-specific setup
for the interrupt hardware on the machine.  Basically we just need to
set an interrupt vector and turn on the interrupts externally.

<<start enable interrupts>>=
	;; setup pac interrupts
	ld	a, #0xff	; fill register 'a' with 0xff
	out	(0x00), a	; send the 0xff to port 0x00
	ld	a, #0x01	; fill register 'a' with 0x01
@

Now we just need to enable interrupts, both in the cpu and in the
external mechanism.

<<start enable interrupts>>=
	ld	(irqen), a	; enable the external interrupt mechanism.
	ei

@

Okay...  at this point, we're ready to do something real on the machine.
Everything has been set up to a state that is now known.


%%%%%%%%%%%%%%%%%%%%
\section{Display Splash Screen}

We just want to display a little something while we wait for things to
start up.

(80 bytes code, 67 bytes data)

<<start splash screen>>=
	    ; Splash screen!
.splash:
	call	guicls

	; draw out the llama!
	ld	hl, #(llama1)	; top half of llama
	ld	bc, #0x0d09
	ld	a, #(LlamaC)
	call	putstrB
	ld	hl, #(llama2)	; bottom half of llama
	inc	c
	call	putstrB

	; draw out the copyright notice and version info
	ld	hl, #(cprt1)
	ld	bc, #0x060f
	ld	a, #0x00	; black text
	call	putstrB		; top black border

	ld	bc, #0x0611
	call	putstrB		; bottom black border

	ld	hl, #(cprt1)
	ld	a, #0x14	; yellow text
	ld	bc, #0x0610
	call	putstrB		; 'Alpaca OS...'

	ld	hl, #(cprt2)
	ld	a, #0x0b	; cyan text
	ld	bc, #0x041e
	call	putstrB		; '(C) 2003...

	ld	hl, #(cprt3)
	ld	bc, #0x0200
	call	putstrC		; email addy
@


<<Init splash data>>=
llama1:
	.byte	0x02, (LlamaS+0), (LlamaS+1)	; first row of llama
llama2:
	.byte	0x02, (LlamaS+2), (LlamaS+3)	; second row of llama
cprt1:
	.byte	0x10
	.ascii	" Alpaca OS v0.8 "
cprt2:
	.byte	0x14
	.ascii	"/2003 Jerry Lawrence"
cprt3:	
	.byte	0x18
	.ascii	"alpacaOS@umlautllama.com"
@


%%%%%%%%%%%%%%%%%%%%
\section{Initialize Tasks}

This is covered in /S/ref{sec:tasksysinit}.  This just serves as a hook
into that section of this document.


<<start initialize tasks>>=
<<Task System Initialization>>
@


%%%%%%%%%%%%%%%%%%%%
\section{Start Runtime}

Eventually replace this with the task executor.

<<start runtime>>=
	;; start runtime

	; set up sprite 1 as the flying llama
	ld	ix, #(sprtbase)
	ld	a, #(LlamaFS*4)
	ld	0(ix), a
	ld	a, #(3)		; decent llama color
	ld	1(ix), a

	;; set up sprite 2 and 3
	ld	ix, #(sprtbase)
	ld	a, #4		;(hardcoded for now)
	ld	2(ix), a
	ld	4(ix), a
	ld	a, #(3)		;0x12
	ld	3(ix), a
	ld	5(ix), a

foo:
jp overfoo
	; fill the screen with a random character
	ld	hl, #vidram
	ld	b, #0x02
	call	rand
	and	#0x0f	; mask
	add	#0x30	; base character
	call	memsetN

foo42:
	; draw a text string
	ld 	hl, #(tstr)
	ld	bc, #0x0101
	ld	a, #0x09
	call 	putstrB

	ld	bc, #0x1c01
	ld	a, #0x18
	call	textright
	call	putstrA
	call	putstrC

	ld	hl, #(tstr)
	ld	bc, #0x0000
	ld	a, #0x12
	call	textcenter
	call	putstrA
	call	putstrC
	
	jp foo

tstr:
	.byte	13
	.ascii	"Hello, world!"
	; attempt to colorize the background too.

overfoo:

	; do a lissajous on the screen with the first sprite (arrow cursor)
	;; X
	ld	ix, #(spritecoords)
	ld	bc, (timer)
	rlc	c	; *2 
	rlc	c	; *2 
	call	sine
	rrca
	and	#0x7f
	add	#0x40
	ld	0(ix), a
	;; Y
	ld	bc, (timer)
	;rlc	c
	call	cosine
	rrca
	and	#0x7f
	add	#0x40
	ld	1(ix), a

jp foo
	; do sprite two now..
	;; X
	ld	ix, #(spritecoords)
	ld	bc, (timer)
	rlc	c	; *2
	call	sine
	rrca
	and	#0x7f
	add	#0x40
	ld	2(ix), a
	;; Y
	ld	bc, (timer)
	rlc	c	; *2
	call	cosine
	rrca
	and	#0x7f
	add	#0x40
	ld	3(ix), a

	; and sprite 3 while we're at it...
	;; x
	ld	ix, #(spritecoords)
	ld	bc, (timer)
	ld	d, c
	rlc	c
	rlc	c
	call	sine
	rrca	
	rrca	
	and	#0x3f
	add	a, d
	ld	4(ix), a
	
	;; Y
	ld	bc, (timer)
	rlc	c	; *2
	rlc	c	; *2
	rlc	c	; *2
	call	sine
	rrca
	and	#0x7f
	add	#0x40
	ld	5(ix), a

foo2:
	ld	a, (0x4d00)
	add	#6
	ld	b, a
	ld	a, (0x4d01)
	add	#8
	ld	c, a
	call	xy2offsB

	ld	ix, #0x4d00
	ld	a, 2(ix)

	inc	0(ix)		; x
	bit	4, 0(ix)
	jp	Z, .over

	inc	1(ix)
	ld	0(ix), #0x00
	bit	4, 1(ix)
	jp	Z, .over
	ld	1(ix), #0x00	; y
	inc	2(ix)		; color
.over:
	push	bc
	ld	bc, #colram
	add	hl, bc
	pop	bc
	ld	(hl), a

jp foo

	; try to hug a screen refresh
	ld	bc, #1
	call	sleep

	jp	foo
	halt
@
