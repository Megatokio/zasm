

headerflag:     equ 0
dataflag:       equ $ff

tCLEAR  equ     $FD             ; token CLEAR
tLOAD   equ     $EF             ; token LOAD
tCODE   equ     $AF             ; token CODE
tPRINT  equ     $F5             ; token PRINT
tUSR    equ     $C0             ; token USR
tLET	equ	$F1		; token LET
tSAVE	equ	$F8		; token SAVE

#target tap


;------ PROGRAM HEADER -------------------------------------------------------
;
#code   0,17,headerflag

		defb    0			; program
		defm    "testloader"		; make sure these are 10 bytes!
		defw    programsize		; length of basic program and variables
		defw    10			; line number for auto start
		defw    programsize		; length of basic program without variables


;------ PROGRAM DATA ---------------------------------------------------------
;
#code	0,$100,dataflag         ; size is truncated as required

	; 60 CLEAR $6000
		defb    0,60                    ; line number
		defb    end60-($+1)             ; line length
		defb    0                       ; statement number
		defb    tCLEAR                  ; token CLEAR
		defm    '24576',$0e0000006000   ; number $6000, ascii & internal format
end60:		defb    $0d                     ; line end marker

	; 70 LOAD "" CODE $8000
		defb    0,70                    ; line number
		defb    end70-($+1)             ; line length
		defb    0                       ; statement number
		defb    tLOAD,'"','"',tCODE     ; token LOAD, 2 quotes, token CODE
		defm    '32768',$0e0000008000   ; number $8000, ascii & internal format
end70:		defb    $0d                     ; line end marker

	; 80 PRINT USR 32768
		defb    0,80                    ; line number
		defb    end80-($+1)             ; line length
		defb    0                       ; statement number
		defb    tLET,'n','=',tUSR	; token LET, n, =, token USR
		defm    '32768',$0e0000008000   ; number $8000, ascii & internal format
end80:		defb    $0d                     ; line end marker

	; 90 SAVE "results" CODE $c000,n
		defb	0,90			; line number
		defb	end90-($+1)		; line length
		defb	0			; statement number
		defb	tSAVE
		defm	'"results"'
		defb	tCODE
		defm	'49152',$0e000000c000, ',n'
end90		defb	$0d
		
		
programsize     equ     $


;------ CODE HEADER ----------------------------------------------------------
;
#code   0,17,headerflag

		defb    3			; code
		defm    "testcode  "		; make sure these are 10 bytes!
		defw    codeend-32768		; length of data block
		defw    32768			; original position
		defw    0			; unused


;------ CODE DATA ------------------------------------------------------------
;
#code   32768,32768,dataflag




; ============================================================================
;
;				PAY LOAD STARTS HERE
;
; ============================================================================







;	bc = Rückgabewert
;	rst 16: print char in A

OPKAN		equ	$1601		; Öffne Kanal in A

PRTBUF		equ	$5b00		; $100 Bytes Druckerpuffer
FRAMES		equ	$5C78		; FRAMES: 3 Byte Bildzaehler (Uhr)
STATE_7FFD	equ	23388


#data $c000-$300,$100

sp_save		data	2
cc2_per_irpt	data	2
cc_per_im0_ackn	data	1
cc_per_im1_ackn	data	1
cc_per_im2_ackn	data	1
cc_waitmap_start data	2
cc_per_line	data	2


scratch 	equ	$c000-$200
stack		equ	$c000-$100
stack_end	equ	$c000		; not in contended ram!


; -------------	entry point ----------------------
start:
		exx
		push	hl
		push	de
		push	bc
		
		ld	(sp_save),sp
		ld	sp,stack_end

		call	init_print

		ld	a,bright+black+yellow_paper
		ld	(print_attr),a
		call	clear_screen
		ld	bc,21<<8 +10
		call	print_locate
		ld	a,green+black_paper
		ld	(print_attr),a
		ld	hl,print_flags
		set	pbit_log,(hl)

		call	print_msg		
		defm	"-- Z80 Test Programm (c) 2004/05 Kio --",$00

		ld	a,black+white_paper
		ld	(print_attr),a

		ld	bc,24<<8 +0
		call	print_locate

	; calculate exact cpu cc/frame/2
	; (cc/frame/2 because cc/frame > 65535)

		call	init_timer
		call	print_msg
		defm	$0d,"cpu cycles per frame: 2 * ",$00
		ld	hl,(cc2_per_irpt)
		call	printdec	

	; test for hardware presence
	
		call	test_ay_bffd_msg
		call	test_mmu_7ffd_msg
		
	; test visible banks for contention

		call	test_4_banks_for_contention_msg
		ld	a,(contended_banks)
		cp	a,%0010
		jr	z,s0
		call	print_msg
		defm	$0d,"  unexpected map of contention",$00
s0			

	; test paged memory for contention
	
		ld	a,(has_mmu_7ffd)
		and	a
		call	nz,test_8_rams_for_contention_msg

	; calc cc per irpt ackn

		call	print_msg
		defm	$0d,"cc for irpt ackn in im0/1/2: ",$00
		call	calc_cc_per_irpt_ackn
		
		ld	a,(cc_per_im0_ackn)
		call	printdec_a
		call	print_space
		
		ld	a,(cc_per_im1_ackn)
		call	printdec_a
		call	print_space

		ld	a,(cc_per_im2_ackn)
		call	printdec_a

		ld	a,(cc_per_im2_ackn)
		cp	19
		jp	z,s3
		call	print_msg
		defm	$0d,"  not the expected value [19]",$00
		jp	abort
s3
				
#if 1
	; validate internal timers

		call	print_msg
		defm	$0d,"validating test timers: ", $00

		; validate cc2_per_irpt			(implicitely)
		; validate at_hl_jp_de			(implicitely)
		; validate wait_cc			(implicitely)
		; validate restzeit_bis_irpt_x16
		; validate restzeit_bis_irpt_x4
		; validate restzeit_bis_irpt
	
		call	test_restzeit_x16		; aborts on failure
		call	test_restzeit_x4		; aborts on failure
		call	test_restzeit			; aborts on failure
		im	1
		
		call	print_msg
		defm	"ok",$00
#endif
		

	; ---- following tests only with contention ----

		ld	a,(contended_banks)
		and	a,%0010
		jp	z,s4				; no contention
		


	; Find Start of Contention

		call	print_msg
		defm	$0d,"first wait cycle at: ",$00
		call	find_first_wait
		ld	(cc_waitmap_start),hl
		call	printdec

#if 1
	; Get and display contention pattern
	; 1: slow method (for emu test too)
	
		call	print_msg
		defm	$0d,"wait pattern: ",$00
		ld	hl,(cc_waitmap_start)
		ld	a,24
		call	get_waitmap
		ld	hl,scratch
s5		ld	a,(hl)
		add	a,'0'
		call	print_char
		inc	hl
		ld	a,l
		cp	a,+(scratch+24)&$ff
		jr	nz,s5
				
	; Get and display contention pattern
	; 2: fast method

		ld	hl,(cc_waitmap_start)
		ld	a,2*16+1		; [nowait,wait] tupel
		call	get_waitmap_fast	; we'll ignore first and last data byte
		push hl				; hl -> next cc

		call	print_nl
		ld	de,scratch+1
s6		ld	a,(de)
		inc	de
		push	de
		call	printdec_a
		ld	a,'+'
		call	print_char
		pop	de
		
		ld	a,(de)
		inc	de
		push	de
		call	printdec_a
		ld	a,' '
		call	print_char
		pop	de

		ld	a,e
		cp	a,$ff&(scratch+1+16*2)
		jr	nz,s6
		
	; test whether pattern repeats as expected

		ld	hl,scratch+1
		ld	de,scratch+1+32
		ld	b,32+1
s7		ld	a,(de)
		cp	a,(hl)
		inc	hl
		inc	de
		jr	z,s8
		call	print_msg
		defm	$0d,"waitmap repeat not as expected",$00
		jp	abort			
s8		djnz	s7

	; calc and display cc/line:

		pop	hl			; -> next cc 

		ld	a,(scratch+1+32)	; last wait cycles
		ld	e,a
		sub	a			; a=0, cy=0
		ld	d,a
		sbc	hl,de			
		ld	de,(cc_waitmap_start)
		sbc	hl,de			; hl = cc/2lines
		sra	h
		rr	l
		ld	(cc_per_line),hl	; NOTE: assuming 16 blocks / line

		call	print_msg
		defm	$0d,"cpu cycles per line: ",$00
		call	printdec
#endif

	; calc opcode access patterns
		
		call	print_msg
		defm	$0d,"opcode memory access patterns:",$00
		call	test_opa
		

s4	; ---- resume for no contention ----


exit:		ld	sp,(sp_save)
		im	1			; security
		ei				; ""

		call	print_nl		; final nl
		call	print_nl		; final nl

		pop	bc
		pop	de
		pop	hl
		exx

		ld	hl,(print_logptr)	; Result = num.chars in log buffer
		ld	de,-$c000
		add	hl,de
		ld	bc,hl			; bc = Rückgabewert

		ret				; finish
	
	
; -------------	abort on failure -----------------

abort:		call	print_msg		; print alert
		defm	$0d,"(abort) ",$00
		jr	exit


            
#include	"math.ass"
#include	"print.ass"
#include	"timer.ass"
#include	"contention.ass"
#include	"disass.ass"
#include	"op_tests_1.ass"
#include	"test_items.ass"
#include	"charset.ass"






; ----------------------------------------------
;	Test 1:
;	Ermittelt die Interruptfrequenz auf 1/1000s genau
;	Annahme: FFB-Frequenz = 50 Hz
;	Annahme: Aktuelle Bank is waitstate-frei.
;
test1		call	print_msg			
		defm	$0d, "cpu clock: ", $00
		call	calcspeed	; -> hl.de MHz			
		push	de
		call	printdec
		ld	a,'.'
		call	print_char
		pop	hl
		call	printdec3
		call	print_msg
		defm	" MHz",$00
		ret



	






; ------------------------------------------------------------
;	Vergleiche hl und de
;	ret z:  wenn sie um max. +/1 1 abweichen 
;	ret nz: wenn sie mehr abweichen
cp_hl_de	and	a
		sbc	hl,de
		ret	z		; v1 - v2 == 0
		ld	a,h
		and	l
		inc	a
		ret	z		; v1 - v2 == -1 ist auch ok
		ld	a,l
		dec	a
		or	h
		ret			; v1 - v2 == +1 ist auch ok


; ------------------------------------------------------------
; allgemein verwendbare Interruptvektortabelle
; das Busbyte im Irpt Ackn Cycle muss $ff sein
; ------------------------------------------------------------

		defs	$ff - ($ & $ff)
irptvector	defw	$0000			; muss jeweils vorher gesetzt werden


; ------------------------------------------------------------
; calculate cpu speed
; interrupts must be enabled
; in:  --
; out: cpu clock = hl*1,000,000 + de*1,000
; mod: af,bc,de,hl
; fails for cpu clock > 65.535 MHz
; ------------------------------------------------------------

; Minimal Interrupt:
; die Interruptroutine muss bis ei mind. 32 Takte dauern incl. irpt ackn. B-)

;		irpt	ackn			; 19 T
inc_xhl_irpt	inc	(hl)			; 10 T		; cspeed_cell
		ei				;  4 T
		ret				; 10 T
						; 43 * 5 +7 +7 = 229 

cspeed_cell	data	1			; interrupt tickercell  -  FRAMES liegt im contended ram!

calcspeed:	ld	hl,inc_xhl_irpt
		ld	(irptvector),hl		; setup vector table
			
		ld	a,irptvector>>8
		ld	i,a			; setup i for table
		ld	hl,cspeed_cell			
		im	2			; setup irpt mode to use table

		ld	de,229/100		; pre-increment total loop count for setup and interrupt routine itself
		halt
		ld	a,(hl)			; 7 T
		add	a,5			; 7 T	; => run for 5 interrupts

cs1		ld	b,5			; 7
cs2		dec	b			; 5*4
		jp	nz,cs2			; 5*10
		inc	de			; 6
		cp	a,(hl)			; 7
		jp	nz,cs1			; 10
			
		im	1			
		ex	hl,de
			
; this took hl*100 ticks for 5/50 sec
; == hl*1,000 ticks for 1 sec
		ld	de,1000
		call	divide
; == hl*1,000,000 + de*1,000 ticks
		ret



   
codeend:

;****** END OF CODE BLOCK ***************************************************

#end




